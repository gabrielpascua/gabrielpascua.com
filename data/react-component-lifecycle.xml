<?xml version="1.0" encoding="UTF-8"?>
<mxGraphModel dx="954" dy="562" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="826" pageHeight="1169" background="#ffffff" math="0" shadow="0"><root><mxCell id="0"/><mxCell id="1" parent="0"/><mxCell id="56" value="" style="group" parent="1" vertex="1" connectable="0"><mxGeometry x="50" y="546" width="580" height="100" as="geometry"/></mxCell><mxCell id="33" value="Unmounting" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];fontSize=18;fontStyle=1" parent="56" vertex="1"><mxGeometry width="110" height="20" as="geometry"/></mxCell><mxCell id="35" value="componentWillUnmount" style="whiteSpace=wrap;html=1;dashed=1;" parent="56" vertex="1"><mxGeometry y="50" width="180" height="50" as="geometry"/></mxCell><mxCell id="36" value="Invoked before a component is unmounted from the DOM via&amp;nbsp;&lt;br&gt;unmountComponentAtNode(). &amp;nbsp;Perform any necessary cleanup here&lt;br&gt;" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="56" vertex="1"><mxGeometry x="200" y="60" width="380" height="30" as="geometry"/></mxCell><mxCell id="63" value="" style="group" parent="1" vertex="1" connectable="0"><mxGeometry x="50" y="90" width="610" height="396" as="geometry"/></mxCell><mxCell id="31" value="" style="group" parent="63" vertex="1" connectable="0"><mxGeometry width="610" height="396" as="geometry"/></mxCell><mxCell id="6" value="Mounting" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];fontSize=18;fontStyle=1" parent="31" vertex="1"><mxGeometry width="90" height="20" as="geometry"/></mxCell><mxCell id="19" value="" style="group" parent="31" vertex="1" connectable="0"><mxGeometry y="50" width="600" height="50" as="geometry"/></mxCell><mxCell id="2" value="constructor" style="whiteSpace=wrap;html=1;dashed=1;" parent="19" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="13" value="Must call `super()` first, or `super(props)` if access to props is required.&lt;br&gt;`this` is undefined if called prior to super(). State initialization is allowed.&lt;br&gt;Binding event handlers is recommended so they are only bound once&lt;br&gt;" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="19" vertex="1"><mxGeometry x="200" width="400" height="40" as="geometry"/></mxCell><mxCell id="20" value="" style="group" parent="31" vertex="1" connectable="0"><mxGeometry y="228" width="560" height="50" as="geometry"/></mxCell><mxCell id="3" value="componentWillMount" style="whiteSpace=wrap;html=1;dashed=1;" parent="20" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="10" value="Invoked once on the client and server. &amp;nbsp;You can handle state and&lt;br&gt;configuration. Props and initial state are defined at this point.&lt;br&gt;" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="20" vertex="1"><mxGeometry x="200" y="10" width="360" height="30" as="geometry"/></mxCell><mxCell id="21" value="" style="group" parent="31" vertex="1" connectable="0"><mxGeometry y="287" width="460" height="50" as="geometry"/></mxCell><mxCell id="4" value="render" style="whiteSpace=wrap;html=1;" parent="21" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="9" value="Required. &amp;nbsp;It must not modify component state." style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="21" vertex="1"><mxGeometry x="200" y="15" width="260" height="20" as="geometry"/></mxCell><mxCell id="23" value="" style="group" parent="31" vertex="1" connectable="0"><mxGeometry y="109" width="600" height="50" as="geometry"/></mxCell><mxCell id="24" value="getDefaultProps()" style="whiteSpace=wrap;html=1;dashed=1;" parent="23" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="25" value="Invoked before any instances are created and thus cannot rely on&lt;br&gt;`this.props`. Complex objects returned here are shared and not copied.&amp;nbsp;&lt;br&gt;Values assigned in the mapping will be available on `this.props`" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="23" vertex="1"><mxGeometry x="200" width="400" height="40" as="geometry"/></mxCell><mxCell id="26" value="" style="group" parent="31" vertex="1" connectable="0"><mxGeometry y="168" width="600" height="50" as="geometry"/></mxCell><mxCell id="27" value="getInitialState()" style="whiteSpace=wrap;html=1;dashed=1;" parent="26" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="28" value="Invoked once and&amp;nbsp;the return value will be used as the initial value of&amp;nbsp;&lt;br&gt;`this.state`. &amp;nbsp;Use to seed data for the component's internally-controlled &lt;br&gt;state but not to generate it." style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="26" vertex="1"><mxGeometry x="200" width="390" height="40" as="geometry"/></mxCell><mxCell id="30" value="" style="group" parent="31" vertex="1" connectable="0"><mxGeometry y="346" width="610" height="50" as="geometry"/></mxCell><mxCell id="5" value="componentDidMount" style="whiteSpace=wrap;html=1;dashed=1;" parent="30" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="14" value="Perform work here if browser interaction is required. &amp;nbsp;Access to the native&lt;br&gt;UI and children via `refs` is available. Children loads from bottom up.&amp;nbsp;&lt;br&gt;Another useful task is setting up 3rd party UIs" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="30" vertex="1"><mxGeometry x="200" width="410" height="40" as="geometry"/></mxCell><mxCell id="57" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;entryX=0;entryY=0.5;edgeStyle=orthogonalEdgeStyle;rounded=0;" parent="31" source="2" target="24" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="-100" y="170" as="sourcePoint"/><mxPoint x="-50" y="120" as="targetPoint"/><Array as="points"><mxPoint x="-30" y="88"/><mxPoint x="-30" y="134"/></Array></mxGeometry></mxCell><mxCell id="59" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;entryX=0;entryY=0.5;edgeStyle=orthogonalEdgeStyle;rounded=0;" parent="31" source="24" target="27" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="-20" y="165" as="sourcePoint"/><mxPoint x="-20" y="211" as="targetPoint"/><Array as="points"><mxPoint x="-30" y="147"/><mxPoint x="-30" y="193"/></Array></mxGeometry></mxCell><mxCell id="61" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;edgeStyle=orthogonalEdgeStyle;rounded=0;entryX=0;entryY=0.5;" parent="31" source="3" target="4" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint y="268" as="sourcePoint"/><mxPoint x="-10" y="314" as="targetPoint"/><Array as="points"><mxPoint y="268"/><mxPoint x="-30" y="268"/><mxPoint x="-30" y="312"/></Array></mxGeometry></mxCell><mxCell id="60" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;edgeStyle=orthogonalEdgeStyle;rounded=0;entryX=0;entryY=0.5;" parent="31" source="27" target="3" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint y="205" as="sourcePoint"/><mxPoint x="-50" y="260" as="targetPoint"/><Array as="points"><mxPoint y="205"/><mxPoint x="-30" y="205"/><mxPoint x="-30" y="253"/></Array></mxGeometry></mxCell><mxCell id="62" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;entryX=0;entryY=0.5;edgeStyle=orthogonalEdgeStyle;rounded=0;" parent="31" source="4" target="5" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="-10" y="325" as="sourcePoint"/><mxPoint x="-10" y="371" as="targetPoint"/><Array as="points"><mxPoint x="-30" y="325"/><mxPoint x="-30" y="371"/></Array></mxGeometry></mxCell><mxCell id="144" value="" style="group" vertex="1" connectable="0" parent="1"><mxGeometry y="1094" width="650" height="278" as="geometry"/></mxCell><mxCell id="119" value="State Changes" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];fontSize=18;fontStyle=1" vertex="1" parent="144"><mxGeometry x="50" width="130" height="20" as="geometry"/></mxCell><mxCell id="124" value="shouldComponentUpdate()" style="whiteSpace=wrap;html=1;dashed=1;" vertex="1" parent="144"><mxGeometry x="50" y="50" width="180" height="50" as="geometry"/></mxCell><mxCell id="125" value="State changes are triggered by `setState()` and fires exactly the same &lt;br&gt;lifecycle as Props Changes except&amp;nbsp;for componentWillReceiveProps(). &amp;nbsp;&lt;br&gt;An incoming prop transition may&amp;nbsp;require a state change but the opposite &lt;br&gt;is not true." style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" vertex="1" parent="144"><mxGeometry x="250" y="134" width="400" height="60" as="geometry"/></mxCell><mxCell id="127" value="componentWillUpdate()" style="whiteSpace=wrap;html=1;dashed=1;" vertex="1" parent="144"><mxGeometry x="50" y="109" width="180" height="50" as="geometry"/></mxCell><mxCell id="130" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;entryX=0;entryY=0.5;edgeStyle=orthogonalEdgeStyle;rounded=0;" edge="1" parent="144" source="124" target="127"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="30" y="106" as="sourcePoint"/><mxPoint x="30" y="152" as="targetPoint"/><Array as="points"><mxPoint x="20" y="88"/><mxPoint x="20" y="134"/></Array></mxGeometry></mxCell><mxCell id="133" value="render()" style="whiteSpace=wrap;html=1;" vertex="1" parent="144"><mxGeometry x="50" y="169" width="180" height="50" as="geometry"/></mxCell><mxCell id="131" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;edgeStyle=orthogonalEdgeStyle;rounded=0;entryX=0;entryY=0.5;" edge="1" parent="144" source="127" target="133"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="50" y="146" as="sourcePoint"/><mxPoint y="201" as="targetPoint"/><Array as="points"><mxPoint x="50" y="146"/><mxPoint x="20" y="146"/><mxPoint x="20" y="194"/></Array></mxGeometry></mxCell><mxCell id="137" value="componentDidUpdate()" style="whiteSpace=wrap;html=1;dashed=1;" vertex="1" parent="144"><mxGeometry x="50" y="228" width="180" height="50" as="geometry"/></mxCell><mxCell id="135" value="" style="endArrow=classic;html=1;strokeColor=#808080;exitX=0;exitY=0.75;edgeStyle=orthogonalEdgeStyle;rounded=0;entryX=0;entryY=0.5;" edge="1" parent="144" source="133" target="137"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="50" y="209" as="sourcePoint"/><mxPoint x="40" y="255" as="targetPoint"/><Array as="points"><mxPoint x="50" y="209"/><mxPoint x="20" y="209"/><mxPoint x="20" y="253"/></Array></mxGeometry></mxCell><mxCell id="147" value="" style="group" vertex="1" connectable="0" parent="1"><mxGeometry x="50" y="697" width="610" height="337" as="geometry"/></mxCell><mxCell id="66" value="Props Changes" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];fontSize=18;fontStyle=1" parent="147" vertex="1"><mxGeometry width="140" height="20" as="geometry"/></mxCell><mxCell id="67" value="" style="group" parent="147" vertex="1" connectable="0"><mxGeometry y="50" width="610" height="50" as="geometry"/></mxCell><mxCell id="68" value="componentWillReceiveProps()" style="whiteSpace=wrap;html=1;dashed=1;" parent="67" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="69" value="Use this as an opportunity to react to a prop transition or compare old and &lt;br&gt;new props before render.&amp;nbsp;The old props can be accessed via `this.props`. &lt;br&gt;You&amp;nbsp;MUST NOT assume that your props have changed.&lt;br&gt;" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="67" vertex="1"><mxGeometry x="200" width="410" height="40" as="geometry"/></mxCell><mxCell id="76" value="" style="group" parent="147" vertex="1" connectable="0"><mxGeometry y="109" width="600" height="50" as="geometry"/></mxCell><mxCell id="77" value="shouldComponentUpdate()" style="whiteSpace=wrap;html=1;dashed=1;" parent="76" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="78" value="`return true` by default, or `return false` if you don't require a component&lt;br&gt;update. if `false` componentWillUpdate() and componentDidUdpate() will&lt;br&gt;not be called." style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="76" vertex="1"><mxGeometry x="200" width="400" height="40" as="geometry"/></mxCell><mxCell id="79" value="" style="group" parent="147" vertex="1" connectable="0"><mxGeometry y="168" width="600" height="50" as="geometry"/></mxCell><mxCell id="80" value="componentWillUpdate()" style="whiteSpace=wrap;html=1;dashed=1;" parent="79" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="81" value="State changes are not allowed because it will trigger another component&lt;br&gt;update causing an infinite loop. Handle configuration changes here or&lt;br&gt;dispatch call a function based on state change." style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="79" vertex="1"><mxGeometry x="200" width="400" height="40" as="geometry"/></mxCell><mxCell id="92" value="" style="group" vertex="1" connectable="0" parent="147"><mxGeometry y="228" width="400" height="50" as="geometry"/></mxCell><mxCell id="71" value="render()" style="whiteSpace=wrap;html=1;" parent="92" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="72" value="Re-rendering and children updates" style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="92" vertex="1"><mxGeometry x="200" y="15" width="200" height="20" as="geometry"/></mxCell><mxCell id="116" value="" style="group" vertex="1" connectable="0" parent="147"><mxGeometry y="287" width="590" height="50" as="geometry"/></mxCell><mxCell id="74" value="componentDidUpdate()" style="whiteSpace=wrap;html=1;dashed=1;" parent="116" vertex="1"><mxGeometry width="180" height="50" as="geometry"/></mxCell><mxCell id="75" value="Operate on the DOM when the component has been updated. &amp;nbsp;Manage&lt;br&gt;3rd party or query the Native UI to get the DOM properties or styling &lt;br&gt;information." style="text;html=1;resizable=0;autosize=1;align=left;verticalAlign=top;spacingTop=-4;points=[];" parent="116" vertex="1"><mxGeometry x="200" width="390" height="40" as="geometry"/></mxCell><mxCell id="148" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;entryX=0;entryY=0.25;jettySize=auto;orthogonalLoop=1;strokeColor=#808080;" edge="1" parent="147" source="68" target="77"><mxGeometry relative="1" as="geometry"><Array as="points"><mxPoint x="-30" y="75"/><mxPoint x="-30" y="122"/></Array></mxGeometry></mxCell><mxCell id="149" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;entryX=0;entryY=0.5;jettySize=auto;orthogonalLoop=1;strokeColor=#808080;" edge="1" parent="147" source="77" target="80"><mxGeometry relative="1" as="geometry"><Array as="points"><mxPoint x="-30" y="134"/><mxPoint x="-30" y="193"/><mxPoint y="193"/></Array></mxGeometry></mxCell><mxCell id="150" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;exitX=0;exitY=0.75;entryX=0.002;entryY=0.427;entryPerimeter=0;jettySize=auto;orthogonalLoop=1;strokeColor=#808080;" edge="1" parent="147" source="80" target="71"><mxGeometry relative="1" as="geometry"><Array as="points"><mxPoint x="-30" y="206"/><mxPoint x="-30" y="249"/></Array></mxGeometry></mxCell><mxCell id="151" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;exitX=0;exitY=0.75;entryX=-0.001;entryY=0.418;entryPerimeter=0;jettySize=auto;orthogonalLoop=1;strokeColor=#808080;" edge="1" parent="147" source="71" target="74"><mxGeometry relative="1" as="geometry"><Array as="points"><mxPoint x="-30" y="266"/><mxPoint x="-30" y="308"/></Array></mxGeometry></mxCell></root></mxGraphModel>